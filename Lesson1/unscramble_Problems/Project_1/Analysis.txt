# Run Time Analysis:

### Worst Case O(n) Efficiency Report:

##### Task0:
  Calculation of O(n), for the texts.csv file, is 1. My assumption is that
  n = 1 because there is only one pass through 
  of the for loop with the texts.csv file.

  Calculation of O(n), for the calls.csv file, is 1. My assumption is that 
  n = 1 because there is only one pass through 
  of the for loop with the calls.csv file.

  My guess is that the efficiency is O(1) or 0(n) for the texts.csv file and
  calls.csv file combined.

##### Task1:
  Looping through texts number have each element in lists which has n total
  element: O(n)

  Looping through calls have each element in has an m total element: O(m)

  Combined, O(n+m) will be linear.

  The total time complexity is O(n).

##### Task2:

  My for loop, "for call in calls:" will take O(nlogn). Then, when comparing the total
  time spent on the phone, it would be another pass through of the dictionary, therefore
  making the total time complexity something like 0(n^2)

##### Task3:

  For part A, calculation of O(n), for Bangalore_codes(), would be 0(n*logn) due to my sorting. 
  For part B, calculation of O(n) would be O(n) because it's just one pass through the data.

##### Task4:

  Creating a list of phone numbers, from the text.csv file, has an efficiency of O(n). Every 
  call  will check for duplicates in receiver list - this efficiency is O(n).
  Sorting in lexicographic order has an efficiency of 0(nlog(n))
